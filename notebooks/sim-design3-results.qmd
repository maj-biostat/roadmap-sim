---
title: "Simulation results 3"
subtitle: "Sequential design with early stopping (restricted action set)"
date: today
date-modified: last-modified
---

```{r, echo = FALSE}
source("./R/init.R")
source("./R/util.R")
log_info("Called simulation-results notebook")
```

The trial is performed sequentially.
Entry into silo-specific (plus surgery specific) parameters is coordinated by triggers for superiority, non-inferiority and futility, defined earlier.

## Equal effects in all treatment arms

```{r}
or_lab <- c("OR 1/2" , "OR 1/1.5", "OR 1", "OR 1.5", "OR 2")
or_lev <- c("1/2", "1/1.5", "1", "1.5", "2")
or_num <- c(1/2, 1/1.5, 1, 1.5, 2)
names(or_lab) <- paste0("v0",c(1, 2, 3, 4, 5))
names(or_num) <- paste0("v0",c(1, 2, 3, 4, 5))

flist <- list.files("data", pattern = "sim03-sc01")

toks <- list()
l <- list()
for(i in 1:length(flist)){
  l[[i]] <- qs::qread(file.path("data", flist[i]))
  toks[[i]] <-  unlist(tstrsplit(flist[i], "[-.]"))
}

d_cfg <- rbindlist(lapply(seq_along(l), function(i){
  tok <- toks[[i]]
  m <- data.table(do.call(cbind, l[[i]]$cfg))
  data.table(cbind(sc = tok[2], v = tok[3], analys = 1:nrow(m), m))
}))

# conversion to numeric
d_cfg[, `:=`(
  nsim = as.numeric(nsim),
  N_pt = as.numeric(N_pt),
  b_r1 = as.numeric(b_r1),
  b_r2 = as.numeric(b_r2),
  w_srp2 = as.numeric(w_srp2),
  b_r1d = as.numeric(b_r1d),
  b_r2d = as.numeric(b_r2d),
  b_f = as.numeric(b_f),
  d_sup = as.numeric(thresh_sup),
  d_ni = as.numeric(thresh_non_inf),
  d_fut = as.numeric(thresh_fut)
  )]

# derive the true effect for surgery based on weight combination
d_cfg[, b_r := b_r1 + w_srp2 * b_r2]
d_cfg[, `:=`(b_r1 = NULL, b_r2 = NULL, w_srp2 = NULL)]

d_tru <- melt(d_cfg[
  , .SD, .SDcols = c("sc", "v", "analys", 
                     "b_r", "b_r1d", "b_r2d", "b_f")], 
  id.vars = c("sc", "v", "analys"), value.name = "lor_tru")


i <- 1
d_dec <- rbindlist(lapply(seq_along(l), function(i){
  tok <- toks[[i]]
  # l[[i]]$d_decision

  d_decision <- copy(l[[i]]$d_decision)
  m <- melt(d_decision, id.vars = c("sim", "analys", "quant"), variable.name = "parname")
  
  # Should be right, but just in case...
  if(any(is.na(m$value))){
    message("Some of the decision values are NA in index ", i, " file ", flist[i])
    m[is.na(value), value := FALSE]
  }
  
  # compute the cumulative instances of a decision being made by sim, each 
  # decision type and by parameter
  m[, value := as.logical(cumsum(value)>0), keyby = .(sim, quant, parname)]
  # summarise by analysis, decision type and parameter
  m <- m[, .(pr_val = mean(value)), keyby = .(analys, quant, parname)]
  # put into wide format
  m <- dcast(m, parname + analys ~ quant, value.var = "pr_val")

  cbind(sc = tok[2], v = tok[3], m)
}))

# d_stopping <- rbindlist(lapply(seq_along(l), function(i){
#   tok <- toks[[i]]
#   # l[[i]]$d_decision
# 
#   d_decision <- copy(l[[i]]$d_decision[quant %in% c("sup", "inf", "fut")])
#   d_decision[, stopped_all := as.numeric(b_r + b_r1d + b_r2d + b_f == 4)]
#   
#   # d_early_stop <- d_decision[stopped_all == 1, .SD[1], keyby = .(sim, quant)]
#   # d_no_stop <- d_decision[!(sim %in% unique(d_stopped_trials$sim)), .SD[.N], keyby = .(sim, quant)]
#   # 
#   # d_decision <- rbind(d_early_stop, d_no_stop)
# 
#   cbind(sc = tok[2], v = tok[3], d_decision)
# }))

d_post_smry_2 <- rbindlist(lapply(seq_along(l), function(i){
  tok <- toks[[i]]
  m <- l[[i]]$d_post_smry_2
  cbind(sc = tok[2], v = tok[3], m)
}))

# grouped participant data 
d_all <- rbindlist(lapply(seq_along(l), function(i){
  tok <- toks[[i]]
  m <- l[[i]]$d_grp
  cbind(sc = tok[2], v = tok[3], m)
}))


```

@tbl-sim-design3-par summarises the setup for the simulated effect sizes from $\log(1/2)$ to $\log(2)$ on all arms. 
All parameters are simulated to have the same effect size such that all parameters are effective, show no effect or are harmful.
Decision thresholds remain constant throughout the duration of the study.
The margins for non-inferiority and superiority are `r log(1/1.1)` and `r log(1)` on the log-odds scale applied across all treatment effect parameters.

```{r}
#| label: tbl-sim-design3-par
#| tbl-cap: 'Parameters used to simulate treatment effects and decision thresholds'
#| column: page
#| out-width: 100%


d_tbl <- d_cfg[, .(v, N_pt, b_r, b_r1d, b_r2d, b_f, thresh_sup, thresh_non_inf, thresh_fut)]

d_tbl[, b_r2d := b_r2d + b_r1d]

d_tbl[, `:=`(
  b_r = exp(b_r),
  b_r1d = exp(b_r1d),
  b_r2d = exp(b_r2d),
  b_f = exp(b_f)
)]

g_tbl <- d_tbl |> gt() |> 
  cols_align(
    columns = everything(),
    align = "center"
  )  |> 
  fmt_number(
    columns = c(b_r, b_r1d, b_r2d, b_f),
    decimals = 3
  ) |>
  tab_spanner(
    label = html("Surgical (D<sub>a</sub>)"),
    columns = c(b_r)
  ) |>
  tab_spanner(
    label = html("Duration (D<sub>b</sub>)"),
    columns = c(b_r1d, b_r2d)
  ) |>
  tab_spanner(
    label = html("Type (D<sub>c</sub>)"),
    columns = c(b_f)
  ) |>
  tab_spanner(
    label = html("Decision thresholds"),
    columns = c(thresh_sup, thresh_non_inf, thresh_fut)
  ) |>
  cols_label(
    v = html("Configuration"),
    b_r = html("revision"),
    b_r1d = html("short<br>(one-stage)"),
    b_r2d = html("short<br>(two-stage)"),
    b_f = html("rif"),
    thresh_sup = html("delta<sub>sup</sub>"),
    thresh_non_inf = html("delta<sub>ni</sub>"),
    thresh_fut = html("delta<sub>fut</sub>")
  ) |>
  tab_style(
    style = list(
      cell_borders(
        sides = c("bottom"), color = "black", weight = px(1), style = "solid"
      )),
    locations = list(
      cells_body(
        columns = everything(),
        rows = N_pt == 2500
      )
    )
  ) |>
  tab_options(
    table.font.size = "70%"
  ) 

g_tbl
```


Notes:

1. For the surgical domain we evaluate whether revision is superior to dair.
We also consider futility. 
Specifically, if we determine that the probability of superiority is less than 5% then we declare futility, to be interpreted as a low chance of superiority given the data observed to date.
If either superiority or futility (for superiority) were established further enrolment into the surgical domain is halted.


::: {.callout-note collapse=false}

If revision is futile then should there be some implication on the duration domain. 
Specifically, if revision is futile then why would we consider antibiotic duration effects within revision?

:::

2. For the duration domain (under one-stage revision) we consider whether short duration is non-inferior to long duration antibiotic treatment.
The model is parameterised such that long duration is the reference level for both one-stage and two-stage revision and therefore we can evaluate this quantity directly.
We also consider inferiority.
If either the short duration is non-inferior or inferior, futher enrolment into this randomised comparison would be halted.

3. For the duration domain (under two-stage revision) we consider whether long duration is superior to short duration.
Since the parameterisation of the model uses long duration as the reference group, this can be evaluated by considering whether short duration is inferior to the long duration where inferiority is simply the complement of superiority.
Futility is also evaluated in an analogous manner.
If either the long duration is superior or futility is indicated, futher enrolment into this randomised comparison would be halted.

4. For the choice domain we evaluate whether rif is superior to no-rif.
We also consider futility.
If either are triggered, further enrolment into the choice domain is halted.

@fig-pr-design3-1 reports the cumulative probability of each decision quantity with enrolment halted only for the questions detailed above.

+ The first row details the cumulative probability of decisions within the surgical domain. 
Superiority (`sup`) and futility (`fut_sup`) are the relevant quantities of interest.

+ The second row details the cumulative probability of decisions within the duration domain under one-stage revision.
Non-inferiority (`trt_ni_ref`) and inferiority (`inf`) are the relevant quantities of interest.

+ The third row details the cumulative probability of decisions within the duration domain under two-stage revision.
Since we evaluate the complement (short is inferior to long) inferiority (`inf`) and futility (`fut_inf`) are the relevant quantities of interest.

+ The fourth row details the cumulative probability of decisions within the choice domain. 
Superiority (`sup`) and futility (`fut_sup`) are the relevant quantities of interest.

```{r}
#| label: fig-pr-design3-1
#| fig-cap: 'Probability of declaring decision by parameter by effect size (all pars set with same OR).'
#| fig-cap-location: margin
#| fig-height: 8
#| fig-width: 7

# put power by scenario, variant and analysis in long format
d_fig <- melt(d_dec, id.vars = c("sc", "v", "analys", "parname"), variable.name = "quant")
# d_fig <- merge(d_fig, d_pars, by = c("sc", "v", "analys", "parname"))
d_fig[, quant := factor(quant, 
                        levels = c("sup", "inf", "fut_sup", "fut_inf", "trt_ni_ref", "ref_ni_trt"))]
# add in the number of pts having reached 12 months post rand by analysis num
d_fig <- merge(d_fig, unique(d_cfg[, .(analys, N_pt)]), by = "analys")

d_fig <- rbind(
  d_fig[parname == "b_r" & quant %in% c("sup", "fut_sup"), ],
  d_fig[parname == "b_r1d" & quant %in% c("trt_ni_ref", "inf"), ],
  d_fig[parname == "b_r2d" & quant %in% c("inf", "fut_inf"), ],
  d_fig[parname == "b_f" & quant %in% c("sup", "fut_sup"), ]
)

d_fig[, or_tru := or_lab[v]]
d_fig[, or_tru := factor(
  or_tru, labels = or_lab, levels = or_lab)]

fx <- g_fx
names(fx) <- c("rev vs ref", "short vs ref (one)", "short vs ref (two)", "rif vs ref")
d_fig[, parname_lab := factor(
  names(fx[parname]), levels = c("rev vs ref", "short vs ref (one)", "short vs ref (two)", "rif vs ref")
  ) ]

d_text <- unique(d_fig[, .(parname_lab, or_tru, quant)])
d_text[parname_lab == "rev vs ref" & or_tru %in% c("OR 1/2", "OR 1/1.5"), 
       `:=`(label = c("revision futile \nto dair"), x = 500, y = 0.2)]
d_text[parname_lab == "rev vs ref" & or_tru %in% c("OR 1.5", "OR 2"), 
       `:=`(label = c("revision superior \nto dair"), x = 500, y = 0.2)]
d_text[parname_lab == "short vs ref (one)" & or_tru %in% c("OR 1/2", "OR 1/1.5"), 
       `:=`(label = c("short inferior \nto long"), x = 500, y = 0.2)]
d_text[parname_lab == "short vs ref (one)" & or_tru %in% c("OR 1.5", "OR 2"), 
       `:=`(label = c("short non-inferior \nto long"), x = 500, y = 0.2)]


d_text[parname_lab == "short vs ref (two)" & or_tru %in% c("OR 1/2", "OR 1/1.5"), 
       `:=`(label = c("long superior \nto short"), x = 500, y = 0.2)]
d_text[parname_lab == "short vs ref (two)" & or_tru %in% c("OR 1.5", "OR 2"), 
       `:=`(label = c("long inferior \nto short"), x = 500, y = 0.2)]

d_text[parname_lab == "rif vs ref" & or_tru %in% c("OR 1/2", "OR 1/1.5"), 
       `:=`(label = c("rif futile \nto no-rif"), x = 500, y = 0.2)]
d_text[parname_lab == "rif vs ref" & or_tru %in% c("OR 1.5", "OR 2"), 
       `:=`(label = c("rif superior \nto no-rif"), x = 500, y = 0.2)]

p <- ggplot(d_fig, aes(x = N_pt, y = value, group = quant, col = quant)) +
  geom_point(size = 0.5) +
  geom_line(lwd = 0.4) +
  geom_hline(yintercept = 0.05, lwd = 0.2) +
  ggthemes::scale_colour_tableau(
    "", palette = "Tableau 10",
  type = "regular",
  direction = 1) +
  geom_text(
    data = d_text,
    aes(x = x, y = y, label = label),
    hjust   = 0,
    vjust   = 0, col = 1, size = 3) +
  scale_linetype_discrete("") +
  scale_x_continuous("N (12-months post rand)", guide = guide_axis(angle = 45)) +
  scale_y_continuous("Cumulative probability", breaks = seq(0, 1, by = 0.1)) +
  facet_grid(parname_lab ~ or_tru)

suppressWarnings(print(p))
```

@tbl-sim-design3-oc1a provides the same detail as the above figure, but makes it easier to see what the magnitudes of the cumulate probabilities are.

```{r}
#| label: tbl-sim-design3-oc1a
#| tbl-cap: 'Cumulative probability of decision'
#| column: page
#| out-width: 100%

# Widen data so that power is shown by col with each col corresponding to an
# analysis
d_tbl <- d_fig[quant %in% c("sup", "fut_sup", "fut_inf", "trt_ni_ref", "inf")]
d_tbl <- dcast(d_tbl, parname + or_tru ~ quant + analys, value.var = "value")
names(d_tbl) <- gsub("superiority", "sup", names(d_tbl))
names(d_tbl) <- gsub("inf", "inf", names(d_tbl))
names(d_tbl) <- gsub("futility (sup)", "fut_sup", names(d_tbl))
names(d_tbl) <- gsub("futility (inf)", "fut_inf", names(d_tbl))
names(d_tbl) <- gsub("NI (trt ni ref)", "trt_ni_inf", names(d_tbl))
d_tbl <- d_tbl[order(or_tru, parname)]
# d_tbl[, parlab := paste0(parname, " - ", get_effect_label(as.character(parname), do_html = F))]
# d_tbl[, parname := NULL]

g_tbl <- d_tbl |> gt(groupname_col = "parname") |> 
  tab_spanner(
    label = html("Superiority"),
    columns = paste0("sup_", 1:5)
  ) |>
  tab_spanner(
    label = html("Futility (on sup)"),
    columns = c(paste0("fut_sup_", 1:5))
  ) |>
  tab_spanner(
    label = html("Futility (on inf)"),
    columns = c(paste0("fut_inf_", 1:5))
  ) |>
  tab_spanner(
    label = html("Inferiority"),
    columns = paste0("inf_", 1:5)
  ) |>
  tab_spanner(
    label = html("NI (trt ni ref)"),
    columns = paste0("trt_ni_ref_", 1:5)
  ) |>
  cols_label(
    or_tru = html("OR (true)"),
    sup_1 = html("500"),
    sup_2 = html("1000"),
    sup_3 = html("1500"),
    sup_4 = html("2000"),
    sup_5 = html("2500"),
    fut_sup_1 = html("500"),
    fut_sup_2 = html("1000"),
    fut_sup_3 = html("1500"),
    fut_sup_4 = html("2000"),
    fut_sup_5 = html("2500"),
    fut_inf_1 = html("500"),
    fut_inf_2 = html("1000"),
    fut_inf_3 = html("1500"),
    fut_inf_4 = html("2000"),
    fut_inf_5 = html("2500"),
    inf_1 = html("500"),
    inf_2 = html("1000"),
    inf_3 = html("1500"),
    inf_4 = html("2000"),
    inf_5 = html("2500"),
    trt_ni_ref_1 = html("500"),
    trt_ni_ref_2 = html("1000"),
    trt_ni_ref_3 = html("1500"),
    trt_ni_ref_4 = html("2000"),
    trt_ni_ref_5 = html("2500")
  ) |>
  tab_style(
    style = cell_borders(
      sides = c("left"),
      weight = px(1)),
    locations = cells_body(
      columns = c(sup_1, fut_sup_1, fut_inf_1, trt_ni_ref_1, inf_1)
      )
    ) |>
  tab_style(
    style = list(
      cell_borders(
        sides = c("top", "bottom"), color = "red", weight = px(1), style = "solid"
      )),
    locations = list(
      cells_body(
        columns = everything(),
        rows = or_tru == "OR 1"
      )
    )
  ) |>
  tab_options(
    table.font.size = "80%"
  ) |>
  sub_missing(columns = everything(), missing_text = "") 

g_tbl
```

@fig-est-design3-1 shows the distribution of estimated posterior means by simulated effect size, parameter and sample size.

```{r}
#| label: fig-est-design3-1
#| fig-cap: 'Distribution of posterior means (true log OR shown in red).'
#| fig-cap-location: margin
#| fig-height: 8
#| fig-width: 8

# only interted in the distribution of posterior means for now
d_fig <- d_post_smry_2[!is.na(mu), .(sc, v, sim, par, analys, mu)]
d_fig <- merge(d_fig, unique(d_cfg[, .(analys, N_pt)]), by = "analys")

d_fig[, analys := factor(analys)]
d_fig[, N_pt := factor(N_pt)]

lor_lab <- c("log-OR 1/2" , "log-OR 1/1.5", "log-OR 1", "log-OR 1.5", "log-OR 2")
names(lor_lab) <- paste0("v0", 1:5)
# or_lev <- c("1/2", "1/1.5", "1", "1.5", "2")
lor_num <- log(c(1/2, 1/1.5, 1, 1.5, 2))

d_fig[, lor_lab := lor_lab[v]]
d_fig[, lor_lab := factor(
  lor_lab, 
  levels = lor_lab,
  labels = lor_lab)]

d_fig_2 <- CJ(
  lor_lab = factor(lor_lab, levels = lor_lab, labels = lor_lab),
  par = factor(unique(d_fig$par), levels = unique(d_fig$par))
)
d_fig_2[, lor_num := rep(lor_num, each = length(unique(d_fig$par)))]



p <- ggplot(d_fig, aes(x = N_pt, y = mu)) +
  geom_hline(data = d_fig_2, aes(yintercept = lor_num, group = par), col = 2) +
  geom_boxplot() +
  scale_x_discrete("", guide = guide_axis(angle = 45)) +
  scale_y_continuous("Distribution of posterior mean") +
  facet_grid(par~lor_lab)

suppressWarnings(print(p))
```


@fig-est-design3-3 shows the expected number of patients entering into the study by silo under each simulation scenario.


::: {.callout-note collapse=false}

Am curious about how many within each silo were revealed but have not implemented the summaries yet.
What else?

:::

```{r, out.width="60%"}
#| label: fig-est-design3-3
#| fig-cap: 'Silo level representation'
#| fig-cap-location: margin
#| fig-height: 5
#| fig-width: 5

d_fig_1 <- copy(d_all)
# N in each strata by simulation
d_fig_1 <- d_fig_1[, .(N = sum(N)), keyby = .(sc, v, sim, l)]
# Average N across simulations
d_fig_1 <- d_fig_1[, .(mu_N = mean(N)), keyby = .(sc, v, l)] 
d_fig_1[, pct := round(100*mu_N / sum(mu_N), 1), keyby = .(sc, v)]

# d_fig_2 <- copy(d_all)
# d_fig_2 <- d_fig_2[, .(N = sum(N)), keyby = .(sc, v, sim, l, er, ed, ef)]
# d_fig_2[er == 1]


lor_lab <- c("log-OR 1/2" , "log-OR 1/1.5", "log-OR 1", "log-OR 1.5", "log-OR 2")
names(lor_lab) <- paste0("v0", 1:5)

d_fig_1[, lor_lab := lor_lab[v]]
d_fig_1[, lor_lab := factor(lor_lab, labels = lor_lab, levels = lor_lab)]

d_fig_1[, l := factor(l, levels = c(0, 1, 2), labels = c("early", "late", "chronic"))]

ggplot(d_fig_1, aes(x = lor_lab, y = mu_N, fill = l)) +
  geom_bar(position="stack", stat="identity") +
  geom_text(aes(label = paste0(pct,"%")),
            position = position_stack(vjust = 0.5), size = 3) +
  scale_fill_discrete("") +
  scale_x_discrete("Scenario (all arms equal)") +
  scale_y_continuous("Patients by silo", breaks = seq(0, 2500, by = 200)) 
```


@fig-est-design3-4 shows the expected number of patients revealed in the surgical (`er`) duration (`ed`) and choice (`ef`) domain by silo and simulation scenario.

```{r, out.width="70%"}
#| label: fig-est-design3-4
#| fig-cap: 'Silo level representation'
#| fig-cap-location: margin
#| fig-height: 7
#| fig-width: 5

d_fig <- copy(d_all)
# N in each strata by simulation
d_fig <- rbind(
  d_fig[er == 1, .(N = sum(N), reveal = "er"), keyby = .(sc, v, sim, l)],
  d_fig[ed == 1, .(N = sum(N), reveal = "ed"), keyby = .(sc, v, sim, l)],
  d_fig[ef == 1, .(N = sum(N), reveal = "ef"), keyby = .(sc, v, sim, l)]
)
# Average N across simulations
d_fig <- d_fig[, .(mu_N = mean(N)), keyby = .(sc, v, l, reveal)] 
d_fig[, pct := round(100*mu_N / sum(mu_N), 1), keyby = .(sc, v, reveal)]

lor_lab <- c("log-OR 1/2" , "log-OR 1/1.5", "log-OR 1", "log-OR 1.5", "log-OR 2")
names(lor_lab) <- paste0("v0", 1:5)
d_fig[, lor_lab := lor_lab[v]]
d_fig[, lor_lab := factor(lor_lab, labels = lor_lab, levels = lor_lab)]

d_fig[, l := factor(l, levels = c(0, 1, 2), labels = c("early", "late", "chronic"))]
d_fig[, reveal := factor(
  reveal, levels = c("er", "ed", "ef"), 
  labels = c("surgery", "duration", "choice"))]

ggplot(d_fig, aes(x = lor_lab, y = mu_N, fill = l)) +
  geom_bar(position="stack", stat="identity") +
  geom_text(aes(label = paste0(pct,"%")),
            position = position_stack(vjust = 0.5), size = 3) +
  scale_fill_discrete("") +
  scale_x_discrete("Scenario (all arms equal)") +
  scale_y_continuous("Patients by silo", breaks = seq(0, 2500, by = 200)) +
  facet_grid(reveal~.)
```

@fig-est-design3-5 shows the expected number of patients that were revealed and contributing to within domain randomised comparisons.

```{r}
#| label: fig-est-design3-5
#| fig-cap: 'Participants contributing to comparison.'
#| fig-cap-location: margin
#| fig-height: 8
#| fig-width: 8

d_fig <- copy(d_all)

# Do these one by one so that the domains do not interfere with one another.
d_er <- d_fig[er == 1, .(N = sum(N)), keyby = .(sc, v, sim, l, analys)]
# I want to have a value (even if 0 via fill) for each analysis so spread then melt
d_er <- dcast(d_er, sc + v + sim + l ~ analys, value.var = "N", fill = 0)
d_er <- melt(d_er, measure.vars = paste0(1:5), variable.name = "analys", value.name = "N")
d_er[, cN := cumsum(N), keyby = .(sc, v, sim, l)]
d_er <- d_er[, .(domain = "surgery", mu_N = mean(cN)), keyby = .(sc, v, l, analys)]

# Do these one by one so that the domains do not interfere with one another.
d_ed1 <- d_fig[ed == 1 & srp == 1, .(N = sum(N)), keyby = .(sc, v, sim, l, analys)]
# I want to have a value (even if 0 via fill) for each analysis so spread then melt
d_ed1 <- dcast(d_ed1, sc + v + sim + l ~ analys, value.var = "N", fill = 0)
d_ed1 <- melt(d_ed1, measure.vars = paste0(1:5), variable.name = "analys", value.name = "N")
d_ed1[, cN := cumsum(N), keyby = .(sc, v, sim, l)]
d_ed1 <- d_ed1[, .(domain = "duration (one)", mu_N = mean(cN)), keyby = .(sc, v, l, analys)]

# Do these one by one so that the domains do not interfere with one another.
d_ed2 <- d_fig[ed == 1 & srp == 2, .(N = sum(N)), keyby = .(sc, v, sim, l, analys)]
# I want to have a value (even if 0 via fill) for each analysis so spread then melt
d_ed2 <- dcast(d_ed2, sc + v + sim + l ~ analys, value.var = "N", fill = 0)
d_ed2 <- melt(d_ed2, measure.vars = paste0(1:5), variable.name = "analys", value.name = "N")
d_ed2[, cN := cumsum(N), keyby = .(sc, v, sim, l)]
d_ed2 <- d_ed2[, .(domain = "duration (two)", mu_N = mean(cN)), keyby = .(sc, v, l, analys)]

# Do these one by one so that the domains do not interfere with one another.
d_ef <- d_fig[ef == 1, .(N = sum(N)), keyby = .(sc, v, sim, l, analys)]
# I want to have a value (even if 0 via fill) for each analysis so spread then melt
d_ef <- dcast(d_ef, sc + v + sim + l ~ analys, value.var = "N", fill = 0)
d_ef <- melt(d_ef, measure.vars = paste0(1:5), variable.name = "analys", value.name = "N")
d_ef[, cN := cumsum(N), keyby = .(sc, v, sim, l)]
d_ef <- d_ef[, .(domain = "choice", mu_N = mean(cN)), keyby = .(sc, v, l, analys)]


d_fig <- rbind(d_er, d_ed1, d_ed2, d_ef)
d_fig[, domain := factor(
  domain, levels = c("surgery", "duration (one)", "duration (two)", "choice"))]

lor_lab <- c("log-OR 1/2" , "log-OR 1/1.5", "log-OR 1", "log-OR 1.5", "log-OR 2")
names(lor_lab) <- paste0("v0", 1:5)

d_fig[, lor_lab := lor_lab[v]]
d_fig[, lor_lab := factor(lor_lab, labels = lor_lab, levels = lor_lab)]
d_fig[, analys := as.numeric(analys)]

d_fig[, l := factor(l, levels = c(0, 1, 2), labels = c("early", "late", "chronic"))]

ggplot(d_fig, aes(x = analys, y = mu_N, fill = l)) +
  geom_bar(position="stack", stat="identity") +
  scale_fill_discrete("") +
  scale_x_continuous("Analysis") +
  scale_y_continuous("Patients contributing to comparison",
                     breaks = seq(0, 2000, by = 200)) +
  facet_grid(domain ~ lor_lab)
```

