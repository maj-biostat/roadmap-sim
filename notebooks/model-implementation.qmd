---
title: "Model implementation"

---

```{r, echo = FALSE}
source("./R/init.R")
log_info("Called model-implementation notebook")
```



## Introduction

```{r}

m2 <- cmdstanr::cmdstan_model("./stan/model-sim-02.stan")

set.seed(1)
ll <- get_trial_data(N = 1e6)

# reset the linear predictor to incrementally test if model recovers params
# d[, eta := alpha_su  + b_a_late + g_b + g_c + b_a_chronic + b_b1_late_one + b_b2_late_two + b_b1_chronic_one + b_b2_chronic_two + b_c]
# d[, y := rbinom(.N, 1, plogis(eta))]

# replace text with indexes
d_i <- copy(d[, .SD, .SDcols = !c(
  "alpha_su", "g_a", "g_b", "g_c", "b_c", 
  "b_a_late", "b_b1_late_one", "b_b2_late_two", 
  "b_a_chronic", "b_b1_chronic_one", "b_b2_chronic_two")])
setkey(d_i, id)

# 999 are redundant indexes - never get referenced
# stan doesn't like NA

i_early_a <- c(dair = 1)
i_late_a <- c(dair = 1, rev = 2)
i_chronic_a <- c(one = 1, two = 2)

i_early_qa <- c(dair = 1)
i_late_qa <- c(one = 1, two = 2, dair = 3)
i_chronic_qa <- c(one = 1, two = 2)

i_early_b <- c(w12 = 1)
i_late_b <- c(w06p1 = 1, w12p1 = 2, d07p2 = 1, w12p2 = 2, w12 = 3)
i_chronic_b <- c(w06p1 = 1, w12p1 = 2, d07p2 = 1, w12p2 = 2)

i_c <- c(norif = 1, rif = 2, other = 3)

d_i[, silo := factor(silo, levels = c("early", "late", "chronic"))]
d_i[, joint := factor(joint, levels = c("knee", "hip"))]

d_i[, ea := as.integer(ea == "Y")]
d_i[, eb := as.integer(eb == "Y")]
d_i[, ec := as.integer(ec == "Y")]

d_i[silo == "early", a := i_early_a[a]]
d_i[silo == "late", a := i_late_a[a]]
d_i[silo == "chronic", a := i_chronic_a[a]]
d_i[, a := as.integer(a)]

d_i[silo == "early", qa := i_early_qa[qa]]
d_i[silo == "late", qa := i_late_qa[qa]]
d_i[silo == "chronic", qa := i_chronic_qa[qa]]
d_i[, qa := as.integer(qa)]

d_i[silo == "early", b := i_early_b[b]]
d_i[silo == "late", b := i_late_b[b]]
d_i[silo == "chronic", b := i_chronic_b[b]]
d_i[, b := as.integer(b)]

d_i[, c := i_c[c]]
d_i[, c := as.integer(c)]

# index for intercept
d_i[silo == "early" & joint == "knee", su := 1]
d_i[silo == "early" & joint == "hip", su := 2]
d_i[silo == "late" & joint == "knee", su := 3]
d_i[silo == "late" & joint == "hip", su := 4]
d_i[silo == "chronic" & joint == "knee", su := 5]
d_i[silo == "chronic" & joint == "hip", su := 6]

d_b <- d_i[, .(y = sum(y), n = .N), keyby = .(silo, joint, su, ea, a, qa, eb, b, ec, c, eta)]
# sapply(d_b, class)

ld <- list(
  N_e = d_b[silo == "early", .N],
  e_su = d_b[silo == "early", su],
  e_y = d_b[silo == "early", y],
  e_n = d_b[silo == "early", n],
  e_ec = d_b[silo == "early", ec],
  e_ecp = d_b[silo == "early", 1-ec],
  e_c = d_b[silo == "early", c],

  N_l = d_b[silo == "late", .N],
  l_su = d_b[silo == "late", su],
  l_y = d_b[silo == "late", y],
  l_n = d_b[silo == "late", n],
  l_ec = d_b[silo == "late", ec],
  l_ecp = d_b[silo == "late", 1-ec],
  l_c = d_b[silo == "late", c],
  l_ea = d_b[silo == "late", ea],
  l_eap = d_b[silo == "late", 1-ea],
  l_a = d_b[silo == "late", a],
  # below a indicates revision and plan indicates one-stage
  l_eb1 = d_b[silo == "late", as.integer(a == 2 & qa == 1)],
  # below a indicates revision and plan indicates two-stage
  l_eb2 = d_b[silo == "late", as.integer(a == 2 & qa == 2)],
  l_ebp = d_b[silo == "late", 1-eb],
  l_b = d_b[silo == "late", b],
  
  # chronic silo
  N_c = d_b[silo == "chronic", .N],
  c_su = d_b[silo == "chronic", su],
  c_y = d_b[silo == "chronic", y],
  c_n = d_b[silo == "chronic", n],
  # domain c randomisation/membership
  c_ec = d_b[silo == "chronic", ec],
  # domain c non-randomisation/non-membership
  c_ecp = d_b[silo == "chronic", 1-ec],
  # domain c allocation
  c_c = d_b[silo == "chronic", c],
  # domain a allocation
  c_ea = d_b[silo == "chronic", ea],
  c_eap = d_b[silo == "chronic", 1-ea],
  c_a = d_b[silo == "chronic", a],
  # domain b randomisation/membership for one-stage pt
  c_eb1 = d_b[silo == "chronic", as.integer(a == 1)],
  # domain b randomisation/membership for two-stage pt
  c_eb2 = d_b[silo == "chronic", as.integer(a == 2)],
  # domain b non-randomisation/non-membership
  c_ebp = d_b[silo == "chronic", 1-eb],
  c_b = d_b[silo == "chronic", b]
)

f2 <- m2$sample(
  ld, iter_warmup = 1000, iter_sampling = 2000,
  parallel_chains = 2, chains = 2, refresh = 0, show_exceptions = F, 
  max_treedepth = 13)

f2$summary(variables = c("alpha"))
f2$summary(variables = c("gamma_b"))
f2$summary(variables = c("gamma_c"))
f2$summary(variables = c("b_a_l"))
f2$summary(variables = c("b_a_c"))
f2$summary(variables = c("b_b1_l"))
f2$summary(variables = c("b_b2_l"))
f2$summary(variables = c("b_b1_c"))
f2$summary(variables = c("b_b2_c"))
f2$summary(variables = c("b_c"))
```


