---
title: "Model implementation"

---

```{r, echo = FALSE}
source("./R/init.R")
log_info("Called model-implementation notebook")
```



## Introduction

Given the design, the simplest implementation I could think of split the data into silo-specific chunks, mimicking the formulation in the model specification earlier.
Nevertheless, the model is cumbersome.

```{r}
#| class-output: stan
#| echo: false
cat(readLines("stan/model-sim-02.stan"), sep = "\n")
```

Below I create a data set with many more records that we will have available simple in order to see if we can get close to recovering the parameters.
I fit the above model and then extract and summarise the posterior.

```{r}
m2 <- cmdstanr::cmdstan_model("stan/model-sim-02.stan")

set.seed(1)
ll <- get_trial_data(N = 5e4)
d_b <- ll$d_i[, .(y = sum(y), n = .N), keyby = .(silo, joint, su, ea, a, qa, eb, b, ec, c, eta)]
# sapply(d_b, class)

ld <- list(
  N_e = d_b[silo == "early", .N],
  e_su = d_b[silo == "early", su],
  e_y = d_b[silo == "early", y],
  e_n = d_b[silo == "early", n],
  e_ec = d_b[silo == "early", ec],
  e_ecp = d_b[silo == "early", 1-ec],
  e_c = d_b[silo == "early", c],

  N_l = d_b[silo == "late", .N],
  l_su = d_b[silo == "late", su],
  l_y = d_b[silo == "late", y],
  l_n = d_b[silo == "late", n],
  l_ec = d_b[silo == "late", ec],
  l_ecp = d_b[silo == "late", 1-ec],
  l_c = d_b[silo == "late", c],
  l_ea = d_b[silo == "late", ea],
  l_eap = d_b[silo == "late", 1-ea],
  l_a = d_b[silo == "late", a],
  # below a indicates revision and plan indicates one-stage
  l_eb1 = d_b[silo == "late", as.integer(a == 2 & qa == 1)],
  # below a indicates revision and plan indicates two-stage
  l_eb2 = d_b[silo == "late", as.integer(a == 2 & qa == 2)],
  l_ebp = d_b[silo == "late", 1-eb],
  l_b = d_b[silo == "late", b],
  
  # chronic silo
  N_c = d_b[silo == "chronic", .N],
  c_su = d_b[silo == "chronic", su],
  c_y = d_b[silo == "chronic", y],
  c_n = d_b[silo == "chronic", n],
  # domain c randomisation/membership
  c_ec = d_b[silo == "chronic", ec],
  # domain c non-randomisation/non-membership
  c_ecp = d_b[silo == "chronic", 1-ec],
  # domain c allocation
  c_c = d_b[silo == "chronic", c],
  # domain a allocation
  c_ea = d_b[silo == "chronic", ea],
  c_eap = d_b[silo == "chronic", 1-ea],
  c_a = d_b[silo == "chronic", a],
  # domain b randomisation/membership for one-stage pt
  c_eb1 = d_b[silo == "chronic", as.integer(a == 1)],
  # domain b randomisation/membership for two-stage pt
  c_eb2 = d_b[silo == "chronic", as.integer(a == 2)],
  # domain b non-randomisation/non-membership
  c_ebp = d_b[silo == "chronic", 1-eb],
  c_b = d_b[silo == "chronic", b]
)

f2 <- m2$sample(
  ld, iter_warmup = 1000, iter_sampling = 2000,
  parallel_chains = 2, chains = 2, refresh = 0, show_exceptions = F, 
  max_treedepth = 13)

# f2$summary(variables = c("alpha"))
# f2$summary(variables = c("gamma_b"))
# f2$summary(variables = c("gamma_c"))
# f2$summary(variables = c("b_a_l"))
# f2$summary(variables = c("b_a_c"))
# f2$summary(variables = c("b_b1_l"))
# f2$summary(variables = c("b_b2_l"))
# f2$summary(variables = c("b_b1_c"))
# f2$summary(variables = c("b_b2_c"))
# f2$summary(variables = c("b_c"))

post <- data.table(f2$draws(variables = c(
  "eta"
), format = "matrix"))

# create index field
post <- melt(post, measure.vars = names(post))
post[, idx := gsub(".*\\[", "", variable)]
post[, idx := gsub("\\]", "", idx)]
post[, idx := as.integer(idx)]

d_fig <- cbind(d_b, post[, .(eta_med = median(value), 
         eta_q025 = quantile(value, prob = 0.025),
         eta_q975 = quantile(value, prob = 0.975)), keyby = idx])
```

@fig-post-vs-tru shows a comparison between the true log-odds of treatment success with the 95% credible interval obtained from the model.
It suggests a fairly strong association between the true and estimated log-odds of treatment success for this particular dataset.

```{r}
#| label: fig-post-vs-tru
#| fig-cap: 'Scatter plot comparing true vs estimated 95% credible interval for log-odds treatment success.'
#| fig-cap-location: margin
#| fig-height: 6

ggplot(d_fig, aes(x = eta, y = eta_med)) +
  # geom_point() +
  geom_linerange(aes(ymin = eta_q025, ymax = eta_q975)) +
  geom_abline(intercept = 0, slope = 1, lwd = 0.1) +
  scale_x_continuous("True log-odds success") +
  scale_y_continuous("Posterior log-odds success (95% credible interval)") +
  facet_grid(silo ~ joint) +
  ggtitle("True log-odds success vs 95% credible interval")
```


