---
title: "Model implementation"
date: today
date-modified: last-modified
---

```{r, echo = FALSE}
source("./R/init.R")
source("./R/util.R")
log_info("Called model-implementation notebook")
```

The model used for the simulations translates the binary outcome into a binomial outcome by aggregating over the unique groups.
For example with the linear predictor:

```{r}
#| code-fold: false

# data generation process
formals(roadmap.data::get_trial_data)$g
```

I get:

```{r}
#| code-fold: false

# simulate data
set.seed(1)
sim_spec <- roadmap.data::get_sim_spec()

unlist(sim_spec)

ll <- roadmap.data::get_trial_data(N = 2500, sim_spec = sim_spec)
d <- copy(ll$d)
head(d[, .(y = sum(y), n = .N), keyby = .(l, er, ed, ef, r, srp0, srp1, srp2, d, f)])
```

The columns correspond to:

+ l: strata 0 early, 1 late, 2 chronic
+ er: revealed indicator surgery
+ ed: revealed indicator duration
+ ef: revealed indicator choice
+ r: randomisation for surgery domain, dair vs rev
+ srp0: indicator for dair performed
+ srp1: indicator for one-stage performed
+ srp2: indicator for two-stage performed
+ d: indicator for duration (see below)
+ f: indicator for choice (0 no-rif, 1 rif)
+ y: number of treatment success
+ n: number of patients

<!-- + rp: indicator of surgical approach that was performed (0 dair, 1 rev) -->

Duration domain depends on what surgery was received, NOT what was originally planned/assigned.
For one-stage 12-weeks is reference group (indicated by 0) vs 6 weeks.
For two-stage 7 days is reference group (indicated by 0) vs 12 weeks (1).

Within early, late and chronic stage infection, the percentage (by silo, `l`) receiving each surgery type (`srp`) as a randomised or non-randomised treatment (`er`) are:

```{r}
#| code-summary: Percent receiving each surgery type within silo

ll <- roadmap.data::get_trial_data(N = 1e6, sim_spec = sim_spec)
d_tbl <- ll$d[, .(n = .N), keyby = .(l, er, srp)]
d_tbl[, N_l := sum(n), keyby = l]
d_tbl[, pct := 100 * n / N_l]
d_tbl[, N_l := NULL]
d_tbl
```

## Stan implementation 

The model spec can be translated into stan, albeit using a different likelihood spec:

```{r}
#| class-output: stan
#| echo: false

cat(readLines("stan/model-sim-04.stan"), sep = "\n")
```

Fit the stan model and extract and summarise the posterior in order to see if the parameter estimates are close to the true values.

::: {.callout-note collapse=false}

There are some terms in the model that under 'ideal' situation where all patients are revealed as they should be that will cause estimation problems.
These issues can manifest as sluggish MCMC or weird `NA` terms appearing in the regression results.
In general an `NA` in the regression results from `lm` means that the coefficient is not estimable. This can happen due to exact collinearity, e.g. when Q3 = a Q1 + b Q2 + c for some a, b and c, but, it can also happen due to not having enough observations to estimate the relevant parameters (e.g. if p >> n). 
If you predictors are categorical and you're adding interaction terms, an `NA` can also mean that there are no observations with that combination of levels of the factors.

:::

```{r, eval = T}
m4 <- cmdstanr::cmdstan_model("stan/model-sim-04.stan")

set.seed(1)

ll <- roadmap.data::get_trial_data(N = 1e6, sim_spec = sim_spec)
lsd <- roadmap.data::get_stan_data(ll$d)

d <- copy(ll$d)
d_s <- copy(lsd$d_s)
ld <- lsd$ld

f1 <- m4$sample(
  ld, iter_warmup = 1000, iter_sampling = 2000,
  parallel_chains = 2, chains = 2, refresh = 0, show_exceptions = F,
  max_treedepth = 13)


# See note above. edx is dropped from the model as it is collinear with
# srp1 and srp2 and leads to an estimation issue.

f2 <- glm(y ~ l1 + l2 +
            erx:srp0 + erx:srp1 + erx:srp2 +
            er:r:srp1 + er:r:srp2 +
            ed:d:srp1 + ed:d:srp2 +
            efx + ef:f,  
          data = d, family = binomial())

# summary(f2)

# dtmp <- data.table(model.matrix(f2)) 
# dtmp <- cbind(model.matrix(f2), tot = 0)
# pracma::rref(dtmp)
# d_s

# dtmp <- data.table(model.matrix(f2))
# 
# rref(dtmp)
# dtmp.mean <- apply(dtmp, 2, mean)
# dtmp <- sweep(dtmp, 2, dtmp.mean)
# 
# f3 <- prcomp(dtmp)
# print(f3)
# 
# # Fairly unsafe - checking for full rank on removal of each var
# linearly_dep_cols(f2)

```

The parameter estimates align reasonably well to the simulation parameters used in the linear predictor:

```{r, eval = T}
post1 <- data.table(f1$draws(variables = c(c("a0", "m", "b")), format = "matrix"))
cf <- coef(f2)

round(rbind(
  "Simulation parameters" = c(sim_spec$a0, sim_spec$m, sim_spec$b),
  "Posterior means" = colMeans(post1),
  "Max likelihood" = c(
    cf[1:3], 
    cf["erx:srp0"], cf["erx:srp1"], cf["erx:srp2"], 
    cf["srp1:er:r"], cf["srp2:er:r"] , 
    cf["srp1:ed:d"], cf["srp2:ed:d"],
    cf["efx"], cf["ef:f"]
  )
), 4)
```

## Estimation - G-computation

::: {.callout-note collapse=false}

Calculations based on Bayesian model are complicated by virtue of use of binomial instead of bernoulli likelihood.
To deal with this, we weight the log-odds contributions by the number of trials associated with each unique combination.

:::

Predictions on log-odds scale:

```{r, eval = T}
#| code-fold: false

eta_r_0 <- f1$draws(variables = c("eta_r_0"), format = "matrix")
eta_r_1 <- f1$draws(variables = c("eta_r_1"), format = "matrix")
eta_d_0 <- f1$draws(variables = c("eta_d_0"), format = "matrix")
eta_d_1 <- f1$draws(variables = c("eta_d_1"), format = "matrix")
eta_f_0 <- f1$draws(variables = c("eta_f_0"), format = "matrix")
eta_f_1 <- f1$draws(variables = c("eta_f_1"), format = "matrix")

```

The G-formula allows you to go from a conditional estimate to a marginal one via standardisation or other means.

```{r, eval = T}
#| code-fold: false

# g-comp - calculations are complicated by virtue of use of binomial
# instead of bernoulli model. Approach is to weight the log-odds contributions
# by the number of trials associated with each unique combination.

max_rows <- 4000

# Compute the effect of revision
b_r <- do.call(rbind, mclapply(1:(min(nrow(eta_r_0), max_rows)), function(ii){
  
  # columns in eta_r_0 correspond to the covariate groups, i.e. the rows in d_s
  
  # The repitition gives the right contribution (weight) for each covariate 
  # combination i.e. each column (covariate combination) is replicated by 
  # the number of pts with this covariate combination. 
  
  # This first one is averaged across both non-reveal and revealed. It is not
  # what we want
  lo_0 <- eta_r_0[ii, rep(1:nrow(d_s), times = ld$n)]
  lo_1 <- eta_r_1[ii, rep(1:nrow(d_s), times = ld$n)]
  mu_r = mean(lo_1 - lo_0)
  
  # Should be no effect of rev in those that were not rand to surg
  # idx <- d_s[er == 0 , which = T]
  # lo_0_erx <- eta_r_0[ii, rep(idx, times = ld$n[idx])]
  # lo_1_erx <- eta_r_1[ii, rep(idx, times = ld$n[idx])]
  # mu_r_erx <- sum(lo_1_erx - lo_0_erx) / sum(ld$n[idx])
  
  # Finally, these give the effect in those revealed to surgery domain. This
  # is what we want.
  idx <- d_s[er == 1 , which = T]
  lo_0_erx <- eta_r_0[ii, rep(idx, times = ld$n[idx])]
  lo_1_erx <- eta_r_1[ii, rep(idx, times = ld$n[idx])]
  mu_r_er <- sum(lo_1_erx - lo_0_erx) / sum(ld$n[idx])
  
  # avg effect then effect in non-reveal and reveal
  c("mu_r" = mu_r, 
    # "mu_r_erx" = mu_r_erx, 
    "mu_r_er" = mu_r_er)
}, mc.cores = 10))


# Compute the effect of duration for the pt that received one-stage
# and for those that received two-stage surgery.
b_d <- do.call(rbind, mclapply(1:(min(nrow(eta_d_0), max_rows)), function(ii){
  
  lo_0 <- eta_d_0[ii, rep(1:nrow(d_s), times = ld$n)]
  lo_1 <- eta_d_1[ii, rep(1:nrow(d_s), times = ld$n)]

  # stratification, silo/revision type that actually took place
  # idx <- d_s[ed == 0 & srp2 == 0, which = T]
  # lo_0_edx_srp1 <- eta_d_0[ii, rep(idx, times = ld$n[idx])]
  # lo_1_edx_srp1 <- eta_d_1[ii, rep(idx, times = ld$n[idx])]
  # mu_d_edx_srp1 <- sum(lo_1_edx_srp1 - lo_0_edx_srp1) / sum(ld$n[idx])
  # 
  # idx <- d_s[ed == 0 & srp2 == 1, which = T]
  # lo_0_edx_srp2 <- eta_d_0[ii, rep(idx, times = ld$n[idx])]
  # lo_1_edx_srp2 <- eta_d_1[ii, rep(idx, times = ld$n[idx])]
  # mu_d_edx_srp2 <- sum(lo_1_edx_srp2 - lo_0_edx_srp2) / sum(ld$n[idx])

  idx <- d_s[ed == 1 & srp2 == 0, which = T]
  lo_0_ed_srp1 <- eta_d_0[ii, rep(idx, times = ld$n[idx])]
  lo_1_ed_srp1 <- eta_d_1[ii, rep(idx, times = ld$n[idx])]
  mu_d_ed_srp1 <- sum(lo_1_ed_srp1 - lo_0_ed_srp1) / sum(ld$n[idx])

  idx <- d_s[ed == 1 & srp2 == 1, which = T]
  lo_0_ed_srp2 <- eta_d_0[ii, rep(idx, times = ld$n[idx])]
  lo_1_ed_srp2 <- eta_d_1[ii, rep(idx, times = ld$n[idx])]
  mu_d_ed_srp2 <- sum(lo_1_ed_srp2 - lo_0_ed_srp2) / sum(ld$n[idx])

  c("mu_d" = mean(lo_1 - lo_0), 
    # you need to base the mean on the n that were used in the strata
    # "mu_d_edx_srp1" = mu_d_edx_srp1,  "mu_d_edx_srp2" = mu_d_edx_srp2,
    "mu_d_ed_srp1" = mu_d_ed_srp1, "mu_d_ed_srp2" = mu_d_ed_srp2
    )
  
}, mc.cores = 10))

# Compute the effect of AB choice.
b_f <- do.call(rbind, mclapply(1:(min(nrow(eta_f_0), max_rows)), function(ii){
  
  # Avg effect of rif - what is the effect of rif in the sample population
  # Might be wrong, but don't believe this is a meaningful/useful quantity.
  lo_0 <- eta_f_0[ii, rep(1:nrow(d_s), times = ld$n)]
  lo_1 <- eta_f_1[ii, rep(1:nrow(d_s), times = ld$n)]
  mu_f <- mean(lo_1 - lo_0)
  
  # Should be no effect of rif in those that were not rand to choice
  # idx <- d_s[ef == 0 , which = T]
  # lo_0_efx <- eta_f_0[ii, rep(idx, times = ld$n[idx])]
  # lo_1_efx <- eta_f_1[ii, rep(idx, times = ld$n[idx])]
  # mu_f_efx <- sum(lo_1_efx - lo_0_efx) / sum(ld$n[idx])

  # Effect of rif in those rand to choice domain
  idx <- d_s[ef == 1 , which = T]
  lo_0_ef <- eta_f_0[ii, rep(idx, times = ld$n[idx])]
  lo_1_ef <- eta_f_1[ii, rep(idx, times = ld$n[idx])]
  mu_f_ef <- sum(lo_1_ef - lo_0_ef) / sum(ld$n[idx])
  
  c("mu_f" = mu_f, 
    # "mu_f_efx" = mu_f_efx, 
    "mu_f_ef" = mu_f_ef)
}, mc.cores = 10))
```

The following provides the results and also comparisons to combinations of parameters used in data simulation.

For the surgery domain, the comparison of interest is dair (ref) vs revision, which can be obtained by averaging over the distribution of surgery type that took place.
The revision effects are silo-specific in that only the late silo is randomised which we obtain by producing a conditional treatment effect by stratifying on the reveal status (`er`).

::: {.callout-warning collapse=false}

I don't believe that we currently need to worry about differential selection ($\mathbb{P}(S=s|G=1)\ne\mathbb{P}(S=s|G=2)$) because only one silo is contributing to the randomised comparison and I think we are restricting to that silo by virtue of conditiong on `er`.

:::

```{r, eval = T}
#| label: surg-quant-1
#| code-summary: Surgery domain effect estimates
#| code-fold: false

# dair (ref)  vs revision (of any form)
avg_comparisons(f2, variables = "r", comparison = "lnor")

# Here, the call to avg_comparisons is equivalent to:
# w_eta_r0 <- sweep(eta_r0, 1, ld$n, "*")
d_new <- copy(d)
lo <- copy(d_new[, r := 0])
d_new <- copy(d)
hi <- copy(d_new[, r := 1])
y_lo <- predict(f2, newdata = lo)
y_hi <- predict(f2, newdata = hi)
mean(y_hi - y_lo)

# we are only interested in the effect of r in the group that were revealed.
cmp <- avg_comparisons(f2, newdata = d[er == 1], variables = "r", comparison = "lnor")
print(cmp, digits = 6)
# The randomised comparison should approx map to a weighted combination of the pars 
mean(d[er == 1, mean(srp1)] * post1$`b[4]` + d[er == 1, mean(srp2)] * post1$`b[5]`) 
```

The above series of outputs suggest somewhat that we are able to recover the required parameters using various approaches.

For the choice domain, the comparison of interest is no-rf (ref) vs rif, which can be obtained directly from the parameter estimate that characterised the effects of the randomised comparisons.
Choice domain effects reflect an average over the silos since all silos can enter this domain.

```{r, eval = T}
#| label: choice-quant-1
#| code-summary: Choice domain effect estimates
#| code-fold: false

# no-rif (ref)  vs rif (of any form)
# NO - avg_comparisons(f2, variables = "f", comparison = "lnor")
# We are only interested in the effect of choice for those revealed to choice
cmp <- avg_comparisons(f2, newdata = d[ef == 1], variables = "f", comparison = "lnor")
print(cmp, digits = 6)
colMeans(b_f)
# And this should just be the same as the coefficient from the model
mean(post1$`b[9]`)
```

For the duration domain, the comparison of interest can be obtained directly from the parameter estimates that characterised the effects of the randomised comparisons.
Duration domain effects are also currently reflecting an average over the silos.

```{r, eval = T}
#| label: duration-quant-1
#| code-summary: Duration domain effect estimates
#| code-fold: false

# long (ref) vs short (specific to the type of surg recvd - one or two stage)

cmp <- avg_comparisons(f2, newdata = d[ed == 1 & srp1 == 1], variables = "d", comparison = "lnor")
print(cmp, digits = 6)

cmp <- avg_comparisons(f2, newdata = d[ed == 1 & srp2 == 1], variables = "d", comparison = "lnor")
print(cmp, digits = 6)

colMeans(b_d)

# The randomised comparison should approx map directly to the surg type 
# specific pars 
mean(post1$`b[6]`) 
mean(post1$`b[7]` ) 
```

Based on the above, we seem to be in the right ballpark.
