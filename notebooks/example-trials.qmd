---
title: "Example trials"

---

```{r, echo = FALSE}
source("./R/init.R")
source("./R/util.R")
log_info("Called example-trials notebook")
```

Example trials are provided to give insight into the cell sizes as well as the level of uncertainty associated with the parameter estimation process.
Examples are from trials at their maximum sample size with all follow up completed.
Sequential variants with adaptations will be added later.

## Null scenario 

@tbl-ex-null1 shows a summary of the treatment sucesses based on the $n$ patients associated with each combination of design variables when no treatment effects (non-membership effects still retained) in the simulated data of 2500 patients.
Given that this is a summary of a single data set, some variation from the underlying simulation parameters is to be expected.

```{r}
#| label: tbl-ex-null1
#| tbl-cap: 'Summary of simulated trial data when no treatment effects present'
#| column: page

sim_spec <- get_sim_spec()
sim_spec$b_a_late["rev"] <- 0
sim_spec$b_a_chronic["two"] <- 0
sim_spec$b_b1_late_one["w12p1"] <- 0
sim_spec$b_b2_late_two["w12p2"] <- 0
sim_spec$b_b1_chronic_one["w12p1"] <- 0
sim_spec$b_b2_chronic_two["w12p2"] <- 0
sim_spec$b_c["rif"] <- 0

set.seed(15)
ll <- get_trial_data(N = 2500, pop_spec = NULL, sim_spec = sim_spec)

gt_tbl <- tbl_ex_trial(ll$d)
gt_tbl
```

Model the simulated data first using standard normal priors on the domain level treatment effects, then increasing the prior standard deviation to ten in order to see if there is any movement in the posterior summary.

```{r}
lsd <- get_stan_data(ll$d_i)
ld <- lsd$ld
d_b <- copy(lsd$d_b)

m2 <- cmdstanr::cmdstan_model("stan/model-sim-02.stan")

f_null_1 <- m2$sample(
  ld, iter_warmup = 1000, iter_sampling = 2000,
  parallel_chains = 2, chains = 2, refresh = 0, show_exceptions = F, 
  max_treedepth = 13)

post_1 <- data.table(f_null_1$draws(variables = c(
  "alpha", "gamma_c", 
  "b_a_l", 
  "b_b1_l", 
  "b_b2_l",
  "b_a_c",
  "b_b1_c", 
  "b_b2_c",
  "b_c"
), format = "matrix"))

# compare when prior sd is set to 10 for trt effects

pri_sd <- 10
ld$pri_sig_b_c <- pri_sd
ld$pri_sig_a_l <- pri_sd
ld$pri_sig_b1_l <- pri_sd
ld$pri_sig_b2_l <- pri_sd
ld$pri_sig_a_c <- pri_sd
ld$pri_sig_b1_c <- pri_sd
ld$pri_sig_b2_c <- pri_sd

f_null_2 <- m2$sample(
  ld, iter_warmup = 1000, iter_sampling = 2000,
  parallel_chains = 2, chains = 2, refresh = 0, show_exceptions = F, 
  max_treedepth = 13)

post_2 <- data.table(f_null_2$draws(variables = c(
  "alpha", "gamma_c", 
  "b_a_l", 
  "b_b1_l", 
  "b_b2_l",
  "b_a_c",
  "b_b1_c", 
  "b_b2_c",
  "b_c"
), format = "matrix"))
```

```{r}
#| label: fig-null-alpha
#| fig-cap: 'Posterior median and 95% CI for baseline log-odds of treatment success (triangles show true values).'
#| fig-cap-location: margin
#| fig-height: 4

d_fig1 <- post_alpha(post_1)
d_fig2 <- post_alpha(post_2)

d_fig <- rbind(
  cbind(prior_sd = 1, d_fig1),
  cbind(prior_sd = pri_sd, d_fig2)
)
d_fig[, prior_sd := factor(prior_sd, levels = c(1, pri_sd))]

ggplot(d_fig, aes(x = grp, y = a, group = prior_sd, col = prior_sd)) +
  scale_x_discrete("") +
  scale_y_continuous("log-odds treatment success") + 
  scale_color_discrete("Prior sd on log-OR domain trt effects") +
  geom_point(data = d_fig, aes(x = grp, y = a_med), position = position_dodge(width = 0.4)) +
  geom_linerange(aes(ymin = a_q025, ymax = a_q975), position = position_dodge2(width = 0.4)) +
  geom_point(data = d_fig, aes(x = grp, y = a), col = 1, pch = 2)
```

```{r}
#| label: fig-null-dom-a
#| fig-cap: 'Posterior median and 95% CI for baseline log-odds of treatment success domain A (independent estimates for late and chronic silo).'
#| fig-cap-location: margin
#| fig-height: 4

d_fig1 <- post_dom_a(post_1)
d_fig2 <- post_dom_a(post_2)

d_fig <- rbind(
  cbind(prior_sd = 1, d_fig1),
  cbind(prior_sd = pri_sd, d_fig2)
)
d_fig[, prior_sd := factor(prior_sd, levels = c(1, pri_sd))]

# https://www.andrewheiss.com/blog/2022/12/08/log10-natural-log-scales-ggplot/

ggplot(d_fig, aes(x = trt, y = b, col = prior_sd)) +
  scale_x_discrete("") +
  scale_y_continuous("log-OR") + 
  scale_color_discrete("Prior sd on log-OR domain trt effects") +
  geom_point(data = d_fig, aes(x = trt, y = b_med), position = position_dodge(width = 0.4)) +
  geom_linerange(aes(ymin = b_q025, ymax = b_q975), position = position_dodge2(width = 0.4)) +
  geom_point(data = d_fig, aes(x = trt, y = b), col = 1, pch = 2) +
  facet_grid(~silo,scale="free_x",space="free_x")
```

```{r}
#| label: fig-null-dom-b
#| fig-cap: 'Posterior median and 95% CI for baseline log-odds of treatment success domain B (independent estimates for late and chronic silo).'
#| fig-cap-location: margin
#| fig-height: 6

d_fig1 <- post_dom_b(post_1)
d_fig2 <- post_dom_b(post_2)

d_fig <- rbind(
  cbind(prior_sd = 1, d_fig1),
  cbind(prior_sd = pri_sd, d_fig2)
)
d_fig[, prior_sd := factor(prior_sd, levels = c(1, pri_sd))]

# https://www.andrewheiss.com/blog/2022/12/08/log10-natural-log-scales-ggplot/

ggplot(d_fig, aes(x = trt, y = b, col = prior_sd)) +
  scale_x_discrete("") +
  scale_y_continuous("log-OR") + 
  scale_color_discrete("Prior sd on log-OR domain trt effects") +
  geom_point(data = d_fig, aes(x = trt, y = b_med), position = position_dodge(width = 0.4)) +
  geom_linerange(aes(ymin = b_q025, ymax = b_q975), position = position_dodge2(width = 0.4)) +
  geom_point(data = d_fig, aes(x = trt, y = b), col = 1, pch = 2) +
  facet_grid(paste0("Planned/assigned surgery: ", qa, "-stage")~silo,scale="free_x",space="free_x")
```

```{r}
#| label: fig-null-dom-c
#| fig-cap: 'Posterior median and 95% CI for baseline log-odds of treatment success in domain C (effect is pooled across all silos).'
#| fig-cap-location: margin
#| fig-height: 4

d_fig1 <- post_dom_c(post_1)
d_fig2 <- post_dom_c(post_2)

d_fig <- rbind(
  cbind(prior_sd = 1, d_fig1),
  cbind(prior_sd = pri_sd, d_fig2)
)
d_fig[, prior_sd := factor(prior_sd, levels = c(1, pri_sd))]

ggplot(d_fig, aes(x = trt, y = b, col = prior_sd)) +
  scale_x_discrete("") +
  scale_y_continuous("log-OR") + 
  scale_color_discrete("Prior sd on log-OR domain trt effects") +
  geom_point(data = d_fig, aes(x = trt, y = b_med), position = position_dodge(width = 0.4)) +
  geom_linerange(aes(ymin = b_q025, ymax = b_q975), position = position_dodge2(width = 0.4)) +
  geom_point(data = d_fig, aes(x = trt, y = b), col = 1, pch = 2)
```

## All domains effective scenario

shows a summary of the treatment sucesses based on the $n$ patients associated with each combination of design variables when all treatment effects set to `log(2)` (with non-membership effects retained as before) in the simulated data of 2500 patients.

```{r}
#| label: tbl-ex-alleff
#| tbl-cap: 'Summary of simulated trial data when no treatment effects present'
#| column: page

sim_spec <- get_sim_spec()
sim_spec$b_a_late["rev"] <- log(2)
sim_spec$b_a_chronic["two"] <- log(2)
sim_spec$b_b1_late_one["w12p1"] <- log(2)
sim_spec$b_b2_late_two["w12p2"] <- log(2)
sim_spec$b_b1_chronic_one["w12p1"] <- log(2)
sim_spec$b_b2_chronic_two["w12p2"] <- log(2)
sim_spec$b_c["rif"] <- log(2)

set.seed(222)
ll <- get_trial_data(N = 2500, pop_spec = NULL, sim_spec = sim_spec)

# just wrapped table generation up into a function to save space and min repitition, see util.R
gt_tbl <- tbl_ex_trial(ll$d)
gt_tbl
```

```{r}
lsd <- get_stan_data(ll$d_i)
ld <- lsd$ld
d_b <- copy(lsd$d_b)

m2 <- cmdstanr::cmdstan_model("stan/model-sim-02.stan")

f_alleff_1 <- m2$sample(
  ld, iter_warmup = 1000, iter_sampling = 2000,
  parallel_chains = 2, chains = 2, refresh = 0, show_exceptions = F, 
  max_treedepth = 13)

post_1 <- data.table(f_alleff_1$draws(variables = c(
  "alpha", "gamma_c", 
  "b_a_l", 
  "b_b1_l", 
  "b_b2_l",
  "b_a_c",
  "b_b1_c", 
  "b_b2_c",
  "b_c"
), format = "matrix"))

# compare when prior sd is set to 10 for trt effects

pri_sd <- 10
ld$pri_sig_b_c <- pri_sd
ld$pri_sig_a_l <- pri_sd
ld$pri_sig_b1_l <- pri_sd
ld$pri_sig_b2_l <- pri_sd
ld$pri_sig_a_c <- pri_sd
ld$pri_sig_b1_c <- pri_sd
ld$pri_sig_b2_c <- pri_sd

f_alleff_2 <- m2$sample(
  ld, iter_warmup = 1000, iter_sampling = 2000,
  parallel_chains = 2, chains = 2, refresh = 0, show_exceptions = F, 
  max_treedepth = 13)

post_2 <- data.table(f_alleff_2$draws(variables = c(
  "alpha", "gamma_c", 
  "b_a_l", 
  "b_b1_l", 
  "b_b2_l",
  "b_a_c",
  "b_b1_c", 
  "b_b2_c",
  "b_c"
), format = "matrix"))
```

```{r}
#| label: fig-alleff-alpha
#| fig-cap: 'Posterior median and 95% CI for baseline log-odds of treatment success (triangles show true values).'
#| fig-cap-location: margin
#| fig-height: 4

d_fig1 <- post_alpha(post_1)
d_fig2 <- post_alpha(post_2)

d_fig <- rbind(
  cbind(prior_sd = 1, d_fig1),
  cbind(prior_sd = pri_sd, d_fig2)
)
d_fig[, prior_sd := factor(prior_sd, levels = c(1, pri_sd))]

ggplot(d_fig, aes(x = grp, y = a, group = prior_sd, col = prior_sd)) +
  scale_x_discrete("") +
  scale_y_continuous("log-odds treatment success") + 
  scale_color_discrete("Prior sd on log-OR domain trt effects") +
  geom_point(data = d_fig, aes(x = grp, y = a_med), position = position_dodge(width = 0.4)) +
  geom_linerange(aes(ymin = a_q025, ymax = a_q975), position = position_dodge2(width = 0.4)) +
  geom_point(data = d_fig, aes(x = grp, y = a), col = 1, pch = 2)
```

```{r}
#| label: fig-alleff-dom-a
#| fig-cap: 'Posterior median and 95% CI for baseline log-odds of treatment success domain A (independent estimates for late and chronic silo).'
#| fig-cap-location: margin
#| fig-height: 4

d_fig1 <- post_dom_a(post_1)
d_fig2 <- post_dom_a(post_2)

d_fig <- rbind(
  cbind(prior_sd = 1, d_fig1),
  cbind(prior_sd = pri_sd, d_fig2)
)
d_fig[, prior_sd := factor(prior_sd, levels = c(1, pri_sd))]

# https://www.andrewheiss.com/blog/2022/12/08/log10-natural-log-scales-ggplot/

ggplot(d_fig, aes(x = trt, y = b, col = prior_sd)) +
  scale_x_discrete("") +
  scale_y_continuous("log-OR") + 
  scale_color_discrete("Prior sd on log-OR domain trt effects") +
  geom_point(data = d_fig, aes(x = trt, y = b_med), position = position_dodge(width = 0.4)) +
  geom_linerange(aes(ymin = b_q025, ymax = b_q975), position = position_dodge2(width = 0.4)) +
  geom_point(data = d_fig, aes(x = trt, y = b), col = 1, pch = 2) +
  facet_grid(~silo,scale="free_x",space="free_x")
```


```{r}
#| label: fig-alleff-dom-b
#| fig-cap: 'Posterior median and 95% CI for baseline log-odds of treatment success domain B (independent estimates for late and chronic silo).'
#| fig-cap-location: margin
#| fig-height: 6

d_fig1 <- post_dom_b(post_1)
d_fig2 <- post_dom_b(post_2)

d_fig <- rbind(
  cbind(prior_sd = 1, d_fig1),
  cbind(prior_sd = pri_sd, d_fig2)
)
d_fig[, prior_sd := factor(prior_sd, levels = c(1, pri_sd))]

# https://www.andrewheiss.com/blog/2022/12/08/log10-natural-log-scales-ggplot/

ggplot(d_fig, aes(x = trt, y = b, col = prior_sd)) +
  scale_x_discrete("") +
  scale_y_continuous("log-OR") + 
  scale_color_discrete("Prior sd on log-OR domain trt effects") +
  geom_point(data = d_fig, aes(x = trt, y = b_med), position = position_dodge(width = 0.4)) +
  geom_linerange(aes(ymin = b_q025, ymax = b_q975), position = position_dodge2(width = 0.4)) +
  geom_point(data = d_fig, aes(x = trt, y = b), col = 1, pch = 2) +
  facet_grid(paste0("Planned/assigned surgery: ", qa, "-stage")~silo,scale="free_x",space="free_x")
```


```{r}
#| label: fig-alleff-dom-c
#| fig-cap: 'Posterior median and 95% CI for baseline log-odds of treatment success in domain C (effect is pooled across all silos).'
#| fig-cap-location: margin
#| fig-height: 4

d_fig1 <- post_dom_c(post_1)
d_fig2 <- post_dom_c(post_2)

d_fig <- rbind(
  cbind(prior_sd = 1, d_fig1),
  cbind(prior_sd = pri_sd, d_fig2)
)
d_fig[, prior_sd := factor(prior_sd, levels = c(1, pri_sd))]

ggplot(d_fig, aes(x = trt, y = b, col = prior_sd)) +
  scale_x_discrete("") +
  scale_y_continuous("log-OR") + 
  scale_color_discrete("Prior sd on log-OR domain trt effects") +
  geom_point(data = d_fig, aes(x = trt, y = b_med), position = position_dodge(width = 0.4)) +
  geom_linerange(aes(ymin = b_q025, ymax = b_q975), position = position_dodge2(width = 0.4)) +
  geom_point(data = d_fig, aes(x = trt, y = b), col = 1, pch = 2)
```

