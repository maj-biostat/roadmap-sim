---
title: "Simulation results 1"
subtitle: "Fixed design with single look at data"

---

```{r, echo = FALSE}
source("./R/init.R")
source("./R/util.R")
log_info("Called simulation-results notebook")
```

## All treatments effective

```{r}
flist <- list.files("data", pattern = "sim01-sc01")
l <- list()
for(i in 1:length(flist)){
  l[[i]] <- qs::qread(file.path("data", flist[i]))
}

d_sup <- rbindlist(lapply(l, function(z){
  cbind(sc = z$cfg$sc, v = z$cfg$v, z$d_sup[, lapply(.SD, mean)])
}))
d_sup <- melt(d_sup, id.vars = c("sc", "v"), value.name = "pr_sup")

d_inf <- rbindlist(lapply(l, function(z){
  cbind(sc = z$cfg$sc, v = z$cfg$v, z$d_inf[, lapply(.SD, mean)])
}))
d_inf <- melt(d_inf, id.vars = c("sc", "v"), value.name = "pr_inf")

d_fut <- rbindlist(lapply(l, function(z){
  cbind(sc = z$cfg$sc, v = z$cfg$v, z$d_fut[, lapply(.SD, mean)])
}))
d_fut <- melt(d_fut, id.vars = c("sc", "v"), value.name = "pr_fut")

d_cfg <- rbindlist(lapply(l, function(z){
  data.table(do.call(cbind, z$cfg)) 
}))
# urgh - conversion to numeric
d_cfg[, `:=`(
  nsim = as.numeric(nsim),
  mc_cores = as.numeric(mc_cores),
  b_a_l_2 = as.numeric(b_a_l_2),
  b_a_c_2 = as.numeric(b_a_c_2),
  b_b1_l_2 = as.numeric(b_b1_l_2),
  b_b2_l_2 = as.numeric(b_b2_l_2),
  b_b1_c_2 = as.numeric(b_b1_c_2),
  b_b2_c_2 = as.numeric(b_b2_c_2),
  b_c_2 = as.numeric(b_c_2),
  d_sup = as.numeric(d_sup),
  d_inf = as.numeric(d_inf),
  d_fut = as.numeric(d_fut)
  )]


n_sims <- d_cfg$nsim[1]
N_pt <- d_cfg$N_pt[1]


d_pars <- melt(d_cfg[
  , .SD, .SDcols = c("sc", "v", 
                     "b_a_l_2", "b_a_c_2", 
                     "b_b1_l_2", "b_b2_l_2", "b_b1_c_2", "b_b2_c_2", 
                     "b_c_2")], 
  id.vars = c("sc", "v"), value.name = "lor_tru")


d_sup <- add_effect_field(d_sup, d_pars)
d_inf <- add_effect_field(d_inf, d_pars)
d_fut <- add_effect_field(d_fut, d_pars)


d_fig <- merge(d_sup, d_inf, by = c("sc", "v", "variable", "lor_tru", "parname"))
d_fig <- merge(d_fig, d_fut, by = c("sc", "v", "variable", "lor_tru", "parname"))
d_fig <- melt(d_fig, measure.vars = c("pr_sup", "pr_inf", "pr_fut"), variable.name = "decision_type")
d_fig[decision_type == "pr_sup", decision_type := "Superiority"]
d_fig[decision_type == "pr_inf", decision_type := "Inferiority"]
d_fig[decision_type == "pr_fut", decision_type := "Futility"]
```

@tbl-sim-par summarises the setup for the simulated effect sizes (from $\log(1/1.4)$ to $\log(2)$). 
All parameters are simulated to have the same effect size such that all parameters are effective, show no effect or are harmful.

Results based on `r n_sims` simulations for a cohort sample size of `r N_pt`.

```{r}
#| label: tbl-sim-par
#| tbl-cap: 'Parameters used to simulate treatment effects and decision thresholds'
#| column: page


d_tbl <- d_cfg[, .SD, .SDcols = !c("sc","nsim", "mc_cores")]
d_tbl <- cbind(
  effect = c(
    "null", rep("superior", 5), rep("inferior", 2)
  ), d_tbl
)


g_tbl <- d_tbl |> gt(rowname_col = "effect") |> 
  cols_align(
    columns = everything(),
    align = "center"
  )  |> 
  fmt_number(
    columns = everything(),
    decimals = 3
  ) |>
  tab_spanner(
    label = html("Surgical (D<sub>a</sub>)"),
    columns = c(b_a_l_2, b_a_c_2)
  ) |>
  tab_spanner(
    label = html("Duration (D<sub>b</sub>)"),
    columns = c(b_b1_l_2, b_b2_l_2, b_b1_c_2, b_b2_c_2)
  ) |>
  tab_spanner(
    label = html("Type (D<sub>c</sub>)"),
    columns = c(b_c_2)
  ) |>
  tab_spanner(
    label = html("Decision thresholds"),
    columns = c(d_sup, d_inf, d_fut)
  ) |>
  cols_label(
    b_a_l_2 = html("revision"),
    b_a_c_2 = html("two-stage"),
    b_b1_l_2 = html("wk12<br>(post stage 1)"),
    b_b2_l_2 = html("wk12<br>(post stage 2)"),
    b_b1_c_2 = html("wk12<br>(post stage 1)"),
    b_b2_c_2 = html("wk12<br>(post stage 2)"),
    b_c_2 = html("rif"),
    d_sup = html("delta<sub>sup</sub>"),
    d_inf = html("delta<sub>inf</sub>"),
    d_fut = html("delta<sub>fut</sub>")
  ) |>
  tab_options(
    table.font.size = "80%"
  ) 

g_tbl
```

@fig-pr-1 summarises the variation in the probability of declaring each decision type on each parameter with increasing effects size (odds ratios).
All domains are set so that the treatment effects are all equal, e.g. all set to $\log(2)$ etc.
The parameters are log-odds-ratios relative to the relevant reference values.

For example, `b_a_late_rev` is the effect revision relative to dair specific to the late silo.
Similarly, `b_a_chronic_two` is the effect of two-stage procedure relative to the one-stage specific to the chronic silo.

```{r}
#| label: fig-pr-1
#| fig-cap: 'Probability of declaring decision by parameter by effect size (all pars set with same OR).'
#| fig-cap-location: margin
#| fig-height: 7

ggplot(d_fig, aes(x = exp(lor_tru), y = value, group = decision_type, col = decision_type)) +
  geom_point(size = 0.5) +
  geom_line() +
  scale_color_discrete("") +
  scale_x_continuous("Odds-ratio", breaks = seq(0, 2, by = 0.2)) +
  scale_y_continuous("Pr(decide superior)", breaks = seq(0, 1, by = 0.1)) +
  facet_wrap(~parname, ncol = 3)
```


```{r}
flist <- list.files("data", pattern = "sim01-sc02")
l <- list()
for(i in 1:length(flist)){
  l[[i]] <- qs::qread(file.path("data", flist[i]))
}

d_sup <- rbindlist(lapply(l, function(z){
  cbind(sc = z$cfg$sc, v = z$cfg$v, z$d_sup[, lapply(.SD, mean)])
}))
d_sup <- melt(d_sup, id.vars = c("sc", "v"), value.name = "pr_sup")

d_inf <- rbindlist(lapply(l, function(z){
  cbind(sc = z$cfg$sc, v = z$cfg$v, z$d_inf[, lapply(.SD, mean)])
}))
d_inf <- melt(d_inf, id.vars = c("sc", "v"), value.name = "pr_inf")

d_fut <- rbindlist(lapply(l, function(z){
  cbind(sc = z$cfg$sc, v = z$cfg$v, z$d_fut[, lapply(.SD, mean)])
}))
d_fut <- melt(d_fut, id.vars = c("sc", "v"), value.name = "pr_fut")

d_cfg <- rbindlist(lapply(l, function(z){
  data.table(do.call(cbind, z$cfg)) 
}))
# urgh - conversion to numeric
d_cfg[, `:=`(
  nsim = as.numeric(nsim),
  mc_cores = as.numeric(mc_cores),
  b_a_l_2 = as.numeric(b_a_l_2),
  b_a_c_2 = as.numeric(b_a_c_2),
  b_b1_l_2 = as.numeric(b_b1_l_2),
  b_b2_l_2 = as.numeric(b_b2_l_2),
  b_b1_c_2 = as.numeric(b_b1_c_2),
  b_b2_c_2 = as.numeric(b_b2_c_2),
  b_c_2 = as.numeric(b_c_2),
  d_sup = as.numeric(d_sup),
  d_inf = as.numeric(d_inf),
  d_fut = as.numeric(d_fut)
  )]


n_sims <- d_cfg$nsim[1]
N_pt <- d_cfg$N_pt[1]


d_pars <- melt(d_cfg[
  , .SD, .SDcols = c("sc", "v", 
                     "b_a_l_2", "b_a_c_2", 
                     "b_b1_l_2", "b_b2_l_2", "b_b1_c_2", "b_b2_c_2", 
                     "b_c_2")], 
  id.vars = c("sc", "v"), value.name = "lor_tru")


d_sup <- add_effect_field(d_sup, d_pars)
d_inf <- add_effect_field(d_inf, d_pars)
d_fut <- add_effect_field(d_fut, d_pars)


d_fig <- merge(d_sup, d_inf, by = c("sc", "v", "variable", "lor_tru", "parname"))
d_fig <- merge(d_fig, d_fut, by = c("sc", "v", "variable", "lor_tru", "parname"))
d_fig <- melt(d_fig, measure.vars = c("pr_sup", "pr_inf", "pr_fut"), variable.name = "decision_type")
d_fig[decision_type == "pr_sup", decision_type := "Superiority"]
d_fig[decision_type == "pr_inf", decision_type := "Inferiority"]
d_fig[decision_type == "pr_fut", decision_type := "Futility"]
```

Repeating the simulations (`r n_sims` iterations) based on a total cohort size of `r N_pt`.

```{r}
#| label: fig-pr-2
#| fig-cap: 'Probability of declaring decision by parameter by effect size (all pars set with same OR).'
#| fig-cap-location: margin
#| fig-height: 7

ggplot(d_fig, aes(x = exp(lor_tru), y = value, group = decision_type, col = decision_type)) +
  geom_point(size = 0.5) +
  geom_line() +
  scale_color_discrete("") +
  scale_x_continuous("Odds-ratio", breaks = seq(0, 2, by = 0.2)) +
  scale_y_continuous("Pr(decide superior)", breaks = seq(0, 1, by = 0.1)) +
  facet_wrap(~parname, ncol = 3)
```



```{r}
flist <- list.files("data", pattern = "sim01-sc03")
l <- list()
for(i in 1:length(flist)){
  l[[i]] <- qs::qread(file.path("data", flist[i]))
}

d_sup <- rbindlist(lapply(l, function(z){
  cbind(sc = z$cfg$sc, v = z$cfg$v, z$d_sup[, lapply(.SD, mean)])
}))
d_sup <- melt(d_sup, id.vars = c("sc", "v"), value.name = "pr_sup")

d_inf <- rbindlist(lapply(l, function(z){
  cbind(sc = z$cfg$sc, v = z$cfg$v, z$d_inf[, lapply(.SD, mean)])
}))
d_inf <- melt(d_inf, id.vars = c("sc", "v"), value.name = "pr_inf")

d_fut <- rbindlist(lapply(l, function(z){
  cbind(sc = z$cfg$sc, v = z$cfg$v, z$d_fut[, lapply(.SD, mean)])
}))
d_fut <- melt(d_fut, id.vars = c("sc", "v"), value.name = "pr_fut")

d_cfg <- rbindlist(lapply(l, function(z){
  data.table(do.call(cbind, z$cfg)) 
}))
# urgh - conversion to numeric
d_cfg[, `:=`(
  nsim = as.numeric(nsim),
  mc_cores = as.numeric(mc_cores),
  b_a_l_2 = as.numeric(b_a_l_2),
  b_a_c_2 = as.numeric(b_a_c_2),
  b_b1_l_2 = as.numeric(b_b1_l_2),
  b_b2_l_2 = as.numeric(b_b2_l_2),
  b_b1_c_2 = as.numeric(b_b1_c_2),
  b_b2_c_2 = as.numeric(b_b2_c_2),
  b_c_2 = as.numeric(b_c_2),
  d_sup = as.numeric(d_sup),
  d_inf = as.numeric(d_inf),
  d_fut = as.numeric(d_fut)
  )]


n_sims <- d_cfg$nsim[1]
N_pt <- d_cfg$N_pt[1]


d_pars <- melt(d_cfg[
  , .SD, .SDcols = c("sc", "v", 
                     "b_a_l_2", "b_a_c_2", 
                     "b_b1_l_2", "b_b2_l_2", "b_b1_c_2", "b_b2_c_2", 
                     "b_c_2")], 
  id.vars = c("sc", "v"), value.name = "lor_tru")


d_sup <- add_effect_field(d_sup, d_pars)
d_inf <- add_effect_field(d_inf, d_pars)
d_fut <- add_effect_field(d_fut, d_pars)


d_fig <- merge(d_sup, d_inf, by = c("sc", "v", "variable", "lor_tru", "parname"))
d_fig <- merge(d_fig, d_fut, by = c("sc", "v", "variable", "lor_tru", "parname"))
d_fig <- melt(d_fig, measure.vars = c("pr_sup", "pr_inf", "pr_fut"), variable.name = "decision_type")
d_fig[decision_type == "pr_sup", decision_type := "Superiority"]
d_fig[decision_type == "pr_inf", decision_type := "Inferiority"]
d_fig[decision_type == "pr_fut", decision_type := "Futility"]
```

Repeating the simulations (`r n_sims` iterations) based on a total cohort size of `r N_pt`.

```{r}
#| label: fig-pr-3
#| fig-cap: 'Probability of declaring decision by parameter by effect size (all pars set with same OR).'
#| fig-cap-location: margin
#| fig-height: 7

ggplot(d_fig, aes(x = exp(lor_tru), y = value, group = decision_type, col = decision_type)) +
  geom_point(size = 0.5) +
  geom_line() +
  scale_color_discrete("") +
  scale_x_continuous("Odds-ratio", breaks = seq(0, 2, by = 0.2)) +
  scale_y_continuous("Pr(decide superior)", breaks = seq(0, 1, by = 0.1)) +
  facet_wrap(~parname, ncol = 3)
```