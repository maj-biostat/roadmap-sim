---
title: "Simulation results 2"
subtitle: "Sequential design with early stopping"

---

```{r, echo = FALSE}
source("./R/init.R")
source("./R/util.R")
log_info("Called simulation-results notebook")
```

The trial is performed sequentially.
Entry into silo-specific (plus surgery specific) parameters is coordinated by triggers for superiority, inferiority and futility, all defined earlier.

## All treatments effective

```{r}
flist <- list.files("data", pattern = "sim02-sc01")
toks <- list()
l <- list()
for(i in 1:length(flist)){
  l[[i]] <- qs::qread(file.path("data", flist[i]))
  toks[[i]] <-  unlist(tstrsplit(flist[i], "[-.]"))
}

# cfg - decision thresholds currently static but could be varied over time
d_cfg <- rbindlist(lapply(seq_along(l), function(i){
  tok <- toks[[i]]
  m <- data.table(do.call(cbind, l[[i]]$cfg))
  data.table(cbind(sc = tok[2], v = tok[3], analys = 1:nrow(m), m))
}))

d_pars <- melt(d_cfg[, c("sc", "v", "analys", g_effs), with = F], 
               id.vars = c("sc", "v", "analys"), 
               value.name = "lor_tru", variable.name = "parname")


d_trig <- rbindlist(lapply(seq_along(l), function(i){
  tok <- toks[[i]]
  l[[i]]$d_trig

  m <- melt(l[[i]]$d_trig, id.vars = c("sim", "analys", "quant"), variable.name = "parname")
  # Should be right, but just in case...
  m[is.na(value), value := FALSE]
  m[, value := as.logical(cumsum(value)>0), keyby = .(sim, quant, parname)]
  m <- m[, .(pr_val = mean(value)), keyby = .(analys, quant, parname)]
  m <- dcast(m, parname + analys ~ quant, value.var = "pr_val")

  cbind(sc = tok[2], v = tok[3], m)
}))


d_est <- rbindlist(lapply(seq_along(l), function(i){
  tok <- toks[[i]]
  l[[i]]$d_trig
  # mean of means
  # what if analysis not reached....?????
  m <- l[[i]]$d_par
  cbind(sc = tok[2], v = tok[3], m)
}))

d_fig <- melt(d_trig, id.vars = c("sc", "v", "analys", "parname"), variable.name = "quant")
d_fig <- merge(d_fig, d_pars, by = c("sc", "v", "analys", "parname"))
d_fig[, quant := factor(quant, 
                        labels = c("superiority", "futility", "inferiority"),
                        levels = c("sup", "fut", "inf"))]
d_fig <- merge(d_fig, unique(d_cfg[, .(analys, N_pt)]), by = "analys")

d_fig[, or_tru := round(exp(lor_tru), 3)]

d_fig[, or_tru := factor(
  or_tru, 
  labels = c("OR 1/1.4" ,"OR 1/1.2", "OR 1", "OR 1.2", "OR 1.4", "OR 1.6", "OR 1.8", "OR 2"),
  levels = c("0.714", "0.833", "1", "1.2", "1.4", "1.6", "1.8", "2"))]

setkey(d_fig, sc, v, analys, N_pt)
```

@tbl-sim-design2-par summarises the setup for the simulated effect sizes (from $\log(1/1.4)$ to $\log(2)$). 
All parameters are simulated to have the same effect size such that all parameters are effective, show no effect or are harmful.
Decision thresholds remain constant throughout the duration of the study.

```{r}
#| label: tbl-sim-design2-par
#| tbl-cap: 'Parameters used to simulate treatment effects and decision thresholds'
#| column: page
#| out-width: 100%


d_tbl <- d_cfg[, .SD, .SDcols = !c("sc","nsim", "mc_cores", "t_pri", "analys")]

g_tbl <- d_tbl |> gt(rowname_col = "effect") |> 
  cols_align(
    columns = everything(),
    align = "center"
  )  |> 
  fmt_number(
    columns = g_effs,
    decimals = 3
  ) |>
  tab_spanner(
    label = html("Surgical (D<sub>a</sub>)"),
    columns = c(b_a_l_2, b_a_c_2)
  ) |>
  tab_spanner(
    label = html("Duration (D<sub>b</sub>)"),
    columns = c(b_b1_l_2, b_b2_l_2, b_b1_c_2, b_b2_c_2)
  ) |>
  tab_spanner(
    label = html("Type (D<sub>c</sub>)"),
    columns = c(b_c_2)
  ) |>
  tab_spanner(
    label = html("Decision thresholds"),
    columns = c(d_sup, d_inf, d_fut)
  ) |>
  cols_label(
    v = html("Configuration"),
    b_a_l_2 = html("revision"),
    b_a_c_2 = html("two-stage"),
    b_b1_l_2 = html("wk12<br>(post stage 1)"),
    b_b2_l_2 = html("wk12<br>(post stage 2)"),
    b_b1_c_2 = html("wk12<br>(post stage 1)"),
    b_b2_c_2 = html("wk12<br>(post stage 2)"),
    b_c_2 = html("rif"),
    d_sup = html("delta<sub>sup</sub>"),
    d_inf = html("delta<sub>inf</sub>"),
    d_fut = html("delta<sub>fut</sub>")
  ) |>
  tab_style(
    style = list(
      cell_borders(
        sides = c("bottom"), color = "black", weight = px(1), style = "solid"
      )),
    locations = list(
      cells_body(
        columns = everything(),
        rows = N_pt == 2500
      )
    )
  ) |>
  tab_options(
    table.font.size = "80%"
  ) 

g_tbl
```

@fig-pr-design2-1 shows the change in the cumulative probability of declaring each of the decision types for each parameter with changing effects size (odds ratios).

::: callout-note
The sample size shows number of enrolled patients having reached 12-months post-randomisation.
:::

As noted above, all domains are set so that the treatment effects are all equal, e.g. all set to $\log(2)$ etc.
The facet labels characterise the odds ratios and the parameters reported (@tbl-par-lookup is a lookup table for translating the parameter names).
The interpretation of some of these parameters is quite challenging.

```{r}
#| label: tbl-par-lookup
#| tbl-cap: 'Translation from parameter names to effects'
#| column: page
#| out-width: 100%

d_tbl <- data.table(
  parname = as.character(unique(d_fig$parname)),
  reflab = get_effect_ref_lev(as.character(unique(d_fig$parname))),
  parlab = get_effect_label(as.character(unique(d_fig$parname)), do_html = F)
)

g_tbl <- d_tbl |> gt(rowname_col = "parname") |> 
  cols_align(
    columns = c("reflab", "parlab"),
    align = "right"
  )  |>
  cols_label(
    parname = "Parameter",
    reflab = "Ref level",
    parlab = "Effect"
  ) |>
  tab_options(
    table.font.size = "80%"
  ) 

g_tbl
```



```{r}
#| label: fig-pr-design2-1
#| fig-cap: 'Probability of declaring decision by parameter by effect size (all pars set with same OR).'
#| fig-cap-location: margin
#| fig-height: 8
#| fig-width: 8

ggplot(d_fig, aes(x = N_pt, y = value, group = quant, col = quant)) +
  geom_point(size = 0.5) +
  geom_line(aes(lty = quant), lwd = 0.3) +
  scale_color_discrete("") +
  scale_linetype_discrete("") +
  scale_x_continuous("Sample size", guide = guide_axis(angle = 45)) +
  scale_y_continuous("Cumulative probability", breaks = seq(0, 1, by = 0.2)) +
  facet_grid(parname~or_tru)
```

@tbl-sim-design2-oc1a provides the same detail as the above figure, but makes it easier to see what the magnitudes of the cumulate probabilities are.

```{r}
#| label: tbl-sim-design2-oc1a
#| tbl-cap: 'Cumulative probability of decision'
#| column: page
#| out-width: 100%

d_tbl <- dcast(d_fig, parname + or_tru ~ quant + analys, value.var = "value")
names(d_tbl) <- gsub("superiority", "sup", names(d_tbl))
names(d_tbl) <- gsub("inferiority", "inf", names(d_tbl))
names(d_tbl) <- gsub("futility", "fut", names(d_tbl))
d_tbl <- d_tbl[order(or_tru, parname)]
d_tbl[, parlab := paste0(parname, " - ", get_effect_label(as.character(parname), do_html = F))]
d_tbl[, parname := NULL]

g_tbl <- d_tbl |> gt(groupname_col = "parlab") |> 
  tab_spanner(
    label = html("Superiority"),
    columns = c("sup_1", "sup_2", "sup_3", "sup_4")
  ) |>
  tab_spanner(
    label = html("Futility"),
    columns = c("fut_1", "fut_2", "fut_3", "fut_4")
  ) |>
  tab_spanner(
    label = html("Inferiority"),
    columns = c("inf_1", "inf_2", "inf_3", "inf_4")
  ) |>
  cols_label(
    or_tru = html("OR (true)"),
    sup_1 = html("1000"),
    sup_2 = html("1500"),
    sup_3 = html("2000"),
    sup_4 = html("2500"),
    fut_1 = html("1000"),
    fut_2 = html("1500"),
    fut_3 = html("2000"),
    fut_4 = html("2500"),
    inf_1 = html("1000"),
    inf_2 = html("1500"),
    inf_3 = html("2000"),
    inf_4 = html("2500")
  ) |>
  tab_style(
    style = cell_borders(
      sides = c("left"),
      weight = px(1)),
    locations = cells_body(
      columns = c(sup_1, fut_1, inf_1)
      )
    ) |>
  tab_style(
    style = list(
      cell_borders(
        sides = c("top", "bottom"), color = "red", weight = px(1), style = "solid"
      )),
    locations = list(
      cells_body(
        columns = everything(),
        rows = or_tru == "OR 1"
      )
    )
  ) |>
  tab_options(
    table.font.size = "80%"
  ) 

g_tbl
```

@fig-est-design2-1 shows the distribution of estimated posterior means by simulated effect size, parameter and sample size.

```{r}
#| label: fig-est-design2-1
#| fig-cap: 'Distribution of posterior means (true log OR shown in red).'
#| fig-cap-location: margin
#| fig-height: 8
#| fig-width: 8

d_fig <- d_est[, .(sc, v, sim, parname = par, analys, mu)]
d_fig <- merge(d_fig, d_pars, by = c("sc", "v", "analys", "parname"))
d_fig <- merge(d_fig, unique(d_cfg[, .(analys, N_pt)]), by = "analys")

d_fig[, analys := factor(analys)]
d_fig[, N_pt := factor(N_pt)]

d_fig[, or_tru := factor(
  round(exp(lor_tru), 3), 
  labels = c("OR 1/1.4" ,"OR 1/1.2", "OR 1", "OR 1.2", "OR 1.4", "OR 1.6", "OR 1.8", "OR 2"),
  levels = c("0.714", "0.833", "1", "1.2", "1.4", "1.6", "1.8", "2"))]

d_fig_2 <- unique(d_fig[, .(sc, or_tru, parname, lor_tru)])

p <- ggplot(d_fig, aes(x = N_pt, y = mu)) +
  geom_hline(data = d_fig_2, aes(yintercept = lor_tru, group = parname), col = 2) +
  geom_boxplot() +
  scale_x_discrete("", guide = guide_axis(angle = 45)) +
  scale_y_continuous("Distribution of posterior mean") +
  facet_grid(parname~or_tru)

suppressWarnings(print(p))
```


## Single effective treatment

```{r, eval = FALSE}


flist <- list.files("data", pattern = "sim02-sc02")
toks <- list()
l <- list()
for(i in 1:length(flist)){
  l[[i]] <- qs::qread(file.path("data", flist[i]))
  toks[[i]] <-  unlist(tstrsplit(flist[i], "[-.]"))
}

# cfg - decision thresholds currently static but could be varied over time
d_cfg <- rbindlist(lapply(seq_along(l), function(i){
  tok <- toks[[i]]
  m <- data.table(do.call(cbind, l[[i]]$cfg))
  data.table(cbind(sc = tok[2], v = tok[3], analys = 1:nrow(m), m))
}))

d_pars <- melt(d_cfg[, c("sc", "v", "analys", g_effs), with = F], 
               id.vars = c("sc", "v", "analys"), 
               value.name = "lor_tru", variable.name = "parname")


d_trig <- rbindlist(lapply(seq_along(l), function(i){
  tok <- toks[[i]]
  l[[i]]$d_trig

  m <- melt(l[[i]]$d_trig, id.vars = c("sim", "analys", "quant"), variable.name = "parname")
  # Should be right, but just in case...
  m[is.na(value), value := FALSE]
  m[, value := as.logical(cumsum(value)>0), keyby = .(sim, quant, parname)]
  m <- m[, .(pr_val = mean(value)), keyby = .(analys, quant, parname)]
  m <- dcast(m, parname + analys ~ quant, value.var = "pr_val")

  cbind(sc = tok[2], v = tok[3], m)
}))

d_fig <- melt(d_trig, id.vars = c("sc", "v", "analys", "parname"), variable.name = "quant")
d_fig <- merge(d_fig, d_pars, by = c("sc", "v", "analys", "parname"))
d_fig[, quant := factor(quant, 
                        labels = c("superiority", "futility", "inferiority"),
                        levels = c("sup", "fut", "inf"))]
d_fig <- merge(d_fig, unique(d_cfg[, .(analys, N_pt)]), by = "analys")

d_fig[, or_tru := round(exp(lor_tru), 3)]

d_fig[, or_tru := factor(
  or_tru, 
  labels = c("OR 1/1.4" ,"OR 1/1.2", "OR 1", "OR 1.2", "OR 1.4", "OR 1.6", "OR 1.8", "OR 2"),
  levels = c("0.714", "0.833", "1", "1.2", "1.4", "1.6", "1.8", "2"))]

setkey(d_fig, sc, v, analys, N_pt)
```

```{r, eval = FALSE}
#| label: fig-pr-design2-2
#| fig-cap: 'Probability of declaring decision by parameter by effect size (all pars set with same OR).'
#| fig-cap-location: margin
#| fig-height: 8
#| fig-width: 8

ggplot(d_fig, aes(x = N_pt, y = value, group = quant, col = quant)) +
  geom_point(size = 0.5) +
  geom_line(aes(lty = quant), lwd = 0.3) +
  scale_color_discrete("") +
  scale_linetype_discrete("") +
  scale_x_continuous("Sample size", guide = guide_axis(angle = 45)) +
  scale_y_continuous("Cumulative probability", breaks = seq(0, 1, by = 0.2)) +
  facet_grid(parname~or_tru)
```


@tbl-sim-design2-oc2 provides the same detail as the above figure, but makes it easier to see what the magnitudes of the cumulate probabilities are.

```{r, eval = FALSE}
#| label: tbl-sim-design2-oc2
#| tbl-cap: 'Cumulative probability of decision'
#| column: page
#| out-width: 100%

d_tbl <- dcast(d_fig, parname + or_tru ~ quant + analys, value.var = "value")
names(d_tbl) <- gsub("superiority", "sup", names(d_tbl))
names(d_tbl) <- gsub("inferiority", "inf", names(d_tbl))
names(d_tbl) <- gsub("futility", "fut", names(d_tbl))
d_tbl <- d_tbl[order(or_tru, parname)]
d_tbl[, parlab := paste0(parname, " - ", get_effect_label(as.character(parname), do_html = F))]
d_tbl[, parname := NULL]

g_tbl <- d_tbl |> gt(groupname_col = "parlab") |> 
  tab_spanner(
    label = html("Superiority"),
    columns = c("sup_1", "sup_2", "sup_3", "sup_4")
  ) |>
  tab_spanner(
    label = html("Futility"),
    columns = c("fut_1", "fut_2", "fut_3", "fut_4")
  ) |>
  tab_spanner(
    label = html("Inferiority"),
    columns = c("inf_1", "inf_2", "inf_3", "inf_4")
  ) |>
  cols_label(
    or_tru = html("OR (true)"),
    sup_1 = html("1000"),
    sup_2 = html("1500"),
    sup_3 = html("2000"),
    sup_4 = html("2500"),
    fut_1 = html("1000"),
    fut_2 = html("1500"),
    fut_3 = html("2000"),
    fut_4 = html("2500"),
    inf_1 = html("1000"),
    inf_2 = html("1500"),
    inf_3 = html("2000"),
    inf_4 = html("2500")
  ) |>
  tab_style(
    style = cell_borders(
      sides = c("left"),
      weight = px(1)),
    locations = cells_body(
      columns = c(sup_1, fut_1, inf_1)
      )
    ) |>
  tab_style(
    style = list(
      cell_borders(
        sides = c("top", "bottom"), color = "red", weight = px(1), style = "solid"
      )),
    locations = list(
      cells_body(
        columns = everything(),
        rows = or_tru == "OR 1"
      )
    )
  ) |>
  tab_options(
    table.font.size = "80%"
  ) 

g_tbl
```

